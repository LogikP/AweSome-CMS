openapi: "3.0.1"
info:
  version: "1"
  title: "awesomecms API"


servers:
  - url: "https://api.awesomecms.link"
    variables:
      api_id:
        default: api_id
        description: set api id

paths:
  /users/signup:
    post:
      summary: "User Registration"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-request-validator: validate_request
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 201
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignUpFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        
  /users/confirmeAccount:
    post:
      summary: "User Confirm Account"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Confirm"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-request-validator: validate_request
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmedSignUpFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        
  /users/signin:
    post:
      summary: "User Registration"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignIn"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-request-validator: validate_request
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignInFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        
  /articles:
    get:
      summary: "Find article by tag"
      parameters:
        - in: query
          name: tag
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArticleList"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FindArticlesFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    post:
      summary: "Create an article"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
      x-amazon-apigateway-request-validator: validate_request
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 201
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateArticleFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
        
  /articles/{article_id}:
    delete:
      summary: "Delete an article"
      parameters:
        - in: path
          name: article_id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 204
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteArticleFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    Confirm:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        code:
          type: string
    SignIn:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ArticleList:
      type: array
      items:
        $ref: '#/components/schemas/Article'
    Article:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        tags:
          type: array
          items:
            type: string
        authorId:
          type: number
        content:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    Empty:
      type: object

securityDefinitions:
  sigv4:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: awsSigv4


x-amazon-apigateway-request-validators:
  validate_request:
    validateRequestBody: true
    validateRequestParameters: true